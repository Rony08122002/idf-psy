
import React, { useState, useEffect, useRef } from "react";
import { useLocation } from "react-router-dom";
import { Conversation } from "@/entities/Conversation";
import { User } from "@/entities/User";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";
import { 
  Send, 
  Mic, 
  MicOff, 
  Video, 
  VideoOff, 
  ArrowLeft,
  MessageCircle,
  Heart,
  AlertTriangle
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

import ChatInterface from "../components/chat/ChatInterface";
import MoodSlider from "../components/chat/MoodSlider";
import AvatarDisplay from "../components/chat/AvatarDisplay";
import ConversationSummary from "../components/chat/ConversationSummary";

export default function Chat() {
  const location = useLocation();
  const navigate = useNavigate();
  const urlParams = new URLSearchParams(location.search);
  const mode = urlParams.get('mode') || 'text';
  
  const [user, setUser] = useState(null);
  const [messages, setMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [conversationStarted, setConversationStarted] = useState(false);
  const [moodScore, setMoodScore] = useState(5);
  const [isRecording, setIsRecording] = useState(false);
  const [conversationComplete, setConversationComplete] = useState(false);
  const [assessment, setAssessment] = useState(null);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    initializeChat();
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const initializeChat = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      // Start conversation with greeting
      const greeting = getGreetingMessage(mode);
      setMessages([{
        role: "assistant",
        content: greeting,
        timestamp: new Date().toISOString()
      }]);
      
    } catch (error) {
      console.error("Error initializing chat:", error);
    }
  };

  const getGreetingMessage = (mode) => {
    const modeGreetings = {
      text: "שלום! אני כאן כדי להקשיב ולתמוך בך היום. איך אתה מרגיש עכשיו?",
      voice: "שלום שלום! אני מוכן לנהל איתך שיחה קולית. קח את הזמן שלך וספר לי איך אתה מרגיש היום.",
      video: "ברוכים הבאים! אני הבינה המלאכותית שלך לתמיכה ואני כאן כדי לתמוך בך. בוא נקיים שיחה פנים אל פנים על איך אתה מרגיש היום."
    };
    return modeGreetings[mode] || modeGreetings.text;
  };

  const sendMessage = async (message) => {
    if (!message.trim() || isLoading) return;

    const userMessage = {
      role: "user",
      content: message,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage("");
    setIsLoading(true);
    setConversationStarted(true);

    try {
      // Generate AI response in Hebrew
      const aiPrompt = `
        אתה בינה מלאכותית חמלה לתמיכה בבריאות הנפש עבור אנשי צבא ישראליים.
        אתה צריך להיות אמפתי, מבין ומקצועי.
        
        השיחה עד כה: ${JSON.stringify(messages)}
        המשתמש הרגע אמר: ${message}
        
        ענה בצורה תומכת בעברית. שאל שאלות המשך כדי להבין טוב יותר את המצב הנפשי שלו.
        שמור על תגובות קצרות אך אכפתיות. אם אתה מזהה סימנים של מצוקה רצינית, הצע בעדינות עזרה מקצועית.
        
        ענה באופן טבעי ותומך בעברית.
      `;

      const response = await InvokeLLM({
        prompt: aiPrompt,
        add_context_from_internet: false
      });

      const assistantMessage = {
        role: "assistant",
        content: response,
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, assistantMessage]);

    } catch (error) {
      console.error("Error generating response:", error);
      setMessages(prev => [...prev, {
        role: "assistant",
        content: "סליחה, יש לי בעיה להגיב עכשיו. נסה שוב בבקשה.",
        timestamp: new Date().toISOString()
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const endConversation = async () => {
    setIsLoading(true);
    
    try {
      // Generate assessment in Hebrew
      const assessmentPrompt = `
        בהתבסס על השיחה הזו בנושא בריאות הנפש, ספק הערכה:
        
        הודעות: ${JSON.stringify(messages)}
        ציון מצב רוח של המשתמש (1-10): ${moodScore}
        
        נתח את השיחה וספק:
        1. קטגוריית מצב רוח כללית (חיובי/ניטרלי/שלילי)
        2. רמת מתח (נמוכה/בינונית/גבוהה)
        3. ניתוח רגש קצר
        4. 2-3 המלצות למשתמש
        
        היה מקצועי ותומך. ענה בעברית.
      `;

      const assessmentResponse = await InvokeLLM({
        prompt: assessmentPrompt,
        response_json_schema: {
          type: "object",
          properties: {
            mood_category: { type: "string", enum: ["positive", "neutral", "negative"] },
            stress_level: { type: "string", enum: ["low", "medium", "high"] },
            sentiment_analysis: { type: "string" },
            recommendations: { type: "array", items: { type: "string" } }
          }
        }
      });

      const conversationData = {
        mode: mode,
        messages: messages,
        mood_assessment: {
          ...assessmentResponse,
          mood_score: moodScore
        },
        duration_minutes: Math.round((Date.now() - new Date(messages[0]?.timestamp).getTime()) / 60000),
        recommendations: assessmentResponse.recommendations || [],
        report_generated: false,
        report_shared: false
      };

      // Save conversation
      await Conversation.create(conversationData);
      
      setAssessment(assessmentResponse);
      setConversationComplete(true);
      
    } catch (error) {
      console.error("Error ending conversation:", error);
    } finally {
      setIsLoading(false);
    }
  };

  if (conversationComplete) {
    return (
      <ConversationSummary 
        assessment={assessment}
        moodScore={moodScore}
        duration={Math.round((Date.now() - new Date(messages[0]?.timestamp).getTime()) / 60000)}
        onNewConversation={() => navigate(createPageUrl("Dashboard"))}
      />
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 p-4 md:p-8" dir="rtl">
      <div className="max-w-4xl mx-auto">
        
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              size="icon"
              onClick={() => navigate(createPageUrl("Dashboard"))}
            >
              <ArrowLeft className="w-4 h-4 scale-x-[-1]" />
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                שיחת {mode === 'text' ? 'טקסט' : mode === 'voice' ? 'קול' : 'וידאו'}
              </h1>
              <p className="text-gray-600">תמיכה בבריאות הנפש בטוחה ופרטית</p>
            </div>
          </div>
          <Badge variant="secondary" className="bg-green-100 text-green-800">
            🔒 מוצפן ופרטי
          </Badge>
        </div>

        <div className="grid lg:grid-cols-4 gap-6">
          
          {/* Chat Interface */}
          <div className="lg:col-span-3">
            <ChatInterface 
              messages={messages}
              currentMessage={currentMessage}
              setCurrentMessage={setCurrentMessage}
              onSendMessage={sendMessage}
              isLoading={isLoading}
              mode={mode}
              isRecording={isRecording}
              setIsRecording={setIsRecording}
              messagesEndRef={messagesEndRef}
            />
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            
            {/* Avatar Display for Video Mode */}
            {mode === 'video' && (
              <AvatarDisplay 
                isActive={conversationStarted}
                avatarType={user?.avatar_preference || 'male'}
              />
            )}

            {/* Mood Slider */}
            <MoodSlider 
              moodScore={moodScore}
              setMoodScore={setMoodScore}
            />

            {/* Quick Actions */}
            <Card className="border-none shadow-lg bg-white/90 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-sm">פעולות מהירות</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {messages.length > 2 && (
                  <Button
                    onClick={endConversation}
                    className="w-full bg-blue-600 hover:bg-blue-700"
                    disabled={isLoading}
                  >
                    השלם צ'ק-אין
                  </Button>
                )}
                
                <div className="text-xs text-gray-500 text-center">
                  <Heart className="w-4 h-4 inline ml-1" />
                  כל השיחות הן סודיות
                </div>
              </CardContent>
            </Card>

            {/* Emergency Support */}
            <Card className="border-red-200 shadow-lg bg-red-50">
              <CardContent className="p-4">
                <div className="flex items-center gap-2 text-red-700 mb-2">
                  <AlertTriangle className="w-4 h-4" />
                  <span className="font-semibold text-sm">תמיכה במשבר</span>
                </div>
                <p className="text-xs text-red-600 mb-3">
                  אם אתה בסכנה מיידית או יש לך מחשבות על פגיעה עצמית
                </p>
                <Button size="sm" className="w-full bg-red-600 hover:bg-red-700 text-white">
                  קבל עזרה עכשיו
                </Button>
              </CardContent>
            </Card>

          </div>
        </div>
      </div>
    </div>
  );
}
